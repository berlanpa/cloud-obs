version: '3.8'

services:
  # Redis for pub/sub messaging
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes

  # PostgreSQL for configuration and events
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: aiobs
      POSTGRES_USER: aiobs
      POSTGRES_PASSWORD: aiobs_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  # ClickHouse for telemetry (optional but recommended)
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse-data:/var/lib/clickhouse
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

  # LiveKit Server (WebRTC SFU)
  livekit-server:
    image: livekit/livekit-server:v1.5.2
    command: --dev --bind 0.0.0.0
    ports:
      - "7880:7880"   # HTTP/WebSocket
      - "7881:7881"   # TURN/STUN
      - "7882:7882/udp"  # WebRTC media
      - "7883:7883/udp"  # WebRTC media (range)
    networks:
      - default

  # Analysis Worker (Python: OpenAI Vision API - no GPU needed!)
  # Fast camera analysis using GPT-4 Vision (works on any Mac/Linux!)
  analysis-worker:
    build:
      context: ./workers/analysis-worker
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - LIVEKIT_URL=${LIVEKIT_URL}
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY}
      - LIVEKIT_API_SECRET=${LIVEKIT_API_SECRET}
      # OpenAI API config (required for camera analysis)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL}
      - FRAME_SAMPLE_INTERVAL=${FRAME_SAMPLE_INTERVAL}
      - LOG_LEVEL=${LOG_LEVEL}
    volumes:
      - ./workers/analysis-worker:/app
      - model-cache:/root/.cache
    depends_on:
      - redis
      - livekit-server
    restart: unless-stopped

  # Decision Service (Node.js/TypeScript)
  decision-service:
    build:
      context: .
      dockerfile: services/decision-service/Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://aiobs:aiobs_dev@postgres:5432/aiobs
      - MIN_HOLD_SEC=2.0
      - COOLDOWN_SEC=4.0
      - DELTA_S_THRESHOLD=0.15
      - PORT=3001
    ports:
      - "3001:3001"
    depends_on:
      - redis
      - postgres

  # Piper TTS Service (Local, Open Source)
  piper-tts:
    build:
      context: .
      dockerfile: services/piper-tts/Dockerfile
    environment:
      - PORT=5001
    ports:
      - "5001:5001"
    volumes:
      - piper-models:/app/models

  # TTS Orchestrator (Node.js/TypeScript + Piper)
  tts-orchestrator:
    build:
      context: .
      dockerfile: services/tts-orchestrator/Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - PIPER_URL=http://piper-tts:5001
      - TTS_SPEED=${TTS_SPEED:-1.0}
      - LIVEKIT_URL=${LIVEKIT_URL}
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY}
      - LIVEKIT_API_SECRET=${LIVEKIT_API_SECRET}
      - MAX_NARRATION_WORDS=12
      - PORT=3002
    ports:
      - "3002:3002"
    depends_on:
      - redis
      - piper-tts

  # Program Producer (track management)
  program-producer:
    build:
      context: .
      dockerfile: services/program-producer/Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - LIVEKIT_URL=${LIVEKIT_URL}
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY}
      - LIVEKIT_API_SECRET=${LIVEKIT_API_SECRET}
      - PORT=3003
    ports:
      - "3003:3003"
    depends_on:
      - redis

  # FFmpeg Compositor Service (NEW)
  compositor:
    build:
      context: .
      dockerfile: services/compositor/Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - LIVEKIT_URL=${LIVEKIT_URL}
      - SWITCH_CHANNEL=switch.cmd
      - OVERLAY_PATH=/app/assets
      - TRANSITION_TYPE=dissolve  # or "cut"
      - TRANSITION_MS=300
      - PORT=3004
    ports:
      - "3004:3004"
    volumes:
      - ./services/compositor/assets:/app/assets
    depends_on:
      - redis

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: services/api-gateway/Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://aiobs:aiobs_dev@postgres:5432/aiobs
      - LIVEKIT_URL=${LIVEKIT_URL}
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY}
      - LIVEKIT_API_SECRET=${LIVEKIT_API_SECRET}
      - PORT=3000
    ports:
      - "3000:3000"
    depends_on:
      - redis
      - postgres
      - decision-service
      - tts-orchestrator
      - program-producer

  # Web OBS UI (Next.js)
  web-obs:
    build:
      context: .
      dockerfile: web-obs/Dockerfile
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:3000
      - NEXT_PUBLIC_LIVEKIT_URL=${LIVEKIT_URL}
    ports:
      - "3101:3000"
    depends_on:
      - api-gateway

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3005:3000"  # Changed from 3001 to avoid conflict with decision-service
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  redis-data:
  postgres-data:
  clickhouse-data:
  model-cache:
  piper-models:
  prometheus-data:
  grafana-data:
